#include "Floor.h"
#include <cmath>

#define F_TEX_WIDTH  16   // Floor texture dimensions
#define F_TEX_HEIGHT 16

// Floor texture (your basic checkered floor)
const unsigned char floor_texture[F_TEX_WIDTH * F_TEX_HEIGHT] = {
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0xff, 0xf0, 0xcc, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0xf0, 0xcc, 0xee, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0x30, 0x66, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30,
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xee, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0xf0, 0xf0, 0xf0, 0xf0, 0xcc, 0xf0, 0xf0, 0xf0, 0x30, 0x30, 0x55, 0x30, 0x30, 0x44, 0x30, 0x30,
		0xf0, 0xdd, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xf0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x60, 0x30,
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x33, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0xf0, 0xff, 0xf0, 0xf0, 0xdd, 0xf0, 0xf0, 0xff,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x55, 0x33, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xf0,
		0x30, 0x44, 0x66, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xaa, 0xf0, 0xf0, 0xcc, 0xf0,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xff, 0xf0, 0xf0, 0xf0, 0xff, 0xf0, 0xdd, 0xf0,
		0x30, 0x30, 0x30, 0x77, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
};

void Floor::render() {
	if (floor_tex_id == 0) {
		initTexture();
	}

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, floor_tex_id);

	// The first time, we build the floor display list
	if (!floor_list) {
		floor_list = glGenLists(1);
		glNewList(floor_list, GL_COMPILE_AND_EXECUTE);

		glMaterialfv(GL_FRONT, GL_DIFFUSE, floor_diffuse);
		glMaterialfv(GL_FRONT, GL_SPECULAR, floor_specular);
		glMaterialf(GL_FRONT, GL_SHININESS, floor_shininess);

		// Draw floor as a bunch of triangle strips (high tesselation
		// improves lighting)
		glNormal3f(0.f, 0.f, 1.f);
		glBegin(GL_QUADS);
		tessellate_floor(-1.f, -1.f, 0.f, 0.f, 0);
		tessellate_floor(0.f, -1.f, 1.f, 0.f, 0);
		tessellate_floor(0.f, 0.f, 1.f, 1.f, 0);
		tessellate_floor(-1.f, 0.f, 0.f, 1.f, 0);
		glEnd();

		glEndList();
	} else
		glCallList(floor_list);

	glDisable(GL_TEXTURE_2D);

}

void Floor::tessellate_floor(float x1, float y1, float x2, float y2, int depth) {
	float delta, x, y;

	// Last recursion?
	if (depth >= 5)
		delta = 999999.f;
	else {
		x = (float) (fabs(x1) < fabs(x2) ? fabs(x1) : fabs(x2));
		y = (float) (fabs(y1) < fabs(y2) ? fabs(y1) : fabs(y2));
		delta = x * x + y * y;
	}

	// Recurse further?
	if (delta < 0.1f) {
		x = (x1 + x2) * 0.5f;
		y = (y1 + y2) * 0.5f;
		tessellate_floor(x1, y1, x, y, depth + 1);
		tessellate_floor(x, y1, x2, y, depth + 1);
		tessellate_floor(x1, y, x, y2, depth + 1);
		tessellate_floor(x, y, x2, y2, depth + 1);
	} else {
		glTexCoord2f(x1 * 30.f, y1 * 30.f);
		glVertex3f(x1 * 80.f, y1 * 80.f, 0.f);
		glTexCoord2f(x2 * 30.f, y1 * 30.f);
		glVertex3f(x2 * 80.f, y1 * 80.f, 0.f);
		glTexCoord2f(x2 * 30.f, y2 * 30.f);
		glVertex3f(x2 * 80.f, y2 * 80.f, 0.f);
		glTexCoord2f(x1 * 30.f, y2 * 30.f);
		glVertex3f(x1 * 80.f, y2 * 80.f, 0.f);
	}
}

void Floor::initTexture() {
	// Upload floor texture
	glGenTextures(1, &floor_tex_id);
	glBindTexture(GL_TEXTURE_2D, floor_tex_id);
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE, F_TEX_WIDTH, F_TEX_HEIGHT,
				 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, floor_texture);
}

